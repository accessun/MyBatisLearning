<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.github.accessun.entity.EmployeeMapper">

  <resultMap type="Employee" id="EmployeeResult">
    <id column="ID" jdbcType="INTEGER" property="id" /> <!-- java.sql.Types -->
    <!-- property : You can map to something simple like: username, or to something more complicated like: address.street.number. -->
    <!-- jdbcType: The JDBC type is only required for nullable columns upon insert, update or delete. (java.sql.Types.*) -->
    <!-- javaType: A fully qualified Java class name, or a type alias (see the table above for the list of built-in type 
      aliases). MyBatis can usually figure out the type if you're mapping to a JavaBean. However, if you are mapping to a HashMap, 
      then you should specify the javaType explicitly to ensure the desired behavior. -->
    <result column="NAME" jdbcType="VARCHAR" property="name" />
    <result column="GENDER" jdbcType="VARCHAR" property="gender" />
    <result column="SALARY" jdbcType="INTEGER" property="salary" />
    <result column="AGE" jdbcType="INTEGER" property="age" />
    <result column="CITY" jdbcType="VARCHAR" property="city" />
    <result column="DEPT_ID" jdbcType="INTEGER" property="deptId" />
  </resultMap>

  <select id="selectEmployees" resultMap="EmployeeResult">
    SELECT ID, NAME, GENDER, SALARY, AGE, CITY, DEPT_ID FROM `employees` WHERE ID &lt; 10
    <if test="city != null and !&quot;&quot;.equals(city.trim())">
      AND CITY = #{city} <!-- #{city} is gotten from the Employee object passed in -->
    </if>
  </select>

  <!-- The fully qualified class name or alias for the parameter that will be passed into this statement. This attribute 
    is optional because MyBatis can calculate the TypeHandler to use out of the actual parameter passed to the statement. Default 
    is unset. -->

  <select id="selectEmployee" parameterType="Employee" resultMap="EmployeeResult">
    SELECT ID, NAME, GENDER, SALARY, AGE, CITY,
    DEPT_ID FROM `employees` WHERE ID = 1
  </select>

  <select id="selectEmployeeWhen" parameterType="Employee" resultMap="EmployeeResult">
    SELECT ID, NAME, GENDER, SALARY, AGE, CITY, DEPT_ID FROM `employees` WHERE 1 = 1
    <choose>
      <when test="name != null and !&quot;&quot;.equals(name.trim())">
        AND NAME = #{name}
      </when>
      <when test="gender != null and !&quot;&quot;.equals(gender.trim())">
        AND GENDER = #{gender}
      </when>
      <otherwise>
        AND ID &lt; 5
      </otherwise>
    </choose>
  </select>

  <!-- The where element knows to only insert "WHERE" if there is any content returned -->
  <!-- by the containing tags. Furthermore, if that content begins with "AND" or "OR", -->
  <!-- it knows to strip it off. -->
  <select id="selectEmployeeWhere" parameterType="Employee" resultMap="EmployeeResult">
    SELECT ID, NAME, GENDER, SALARY, AGE, CITY, DEPT_ID FROM `employees`
    <where>
      <if test="name != null">NAME = #{name}</if>
      <if test="gender != null">AND GENDER = #{gender}</if>
      <if test="age != 0">AND AGE &lt; 30</if>
    </where>
  </select>

  <select id="selectEmployeeIn" resultMap="EmployeeResult">
    SELECT ID, NAME, GENDER, SALARY, AGE, CITY, DEPT_ID FROM `employees`
    WHERE ID IN
    <foreach collection="list" index="index" item="item" open="(" close=")" separator=",">
      #{item}
    </foreach>
  </select>

  <select id="selectEmployeeBind" parameterType="string" resultMap="EmployeeResult">
    <bind name="pattern" value="'%' + _parameter + '%'" />
    SELECT ID, NAME, GENDER, SALARY, AGE, CITY, DEPT_ID FROM `employees`
    WHERE NAME LIKE #{pattern}
  </select>

  <select id="selectEmployeeHashMap" resultType="hashmap">
    SELECT * FROM `employees` WHERE ID = #{id}
  </select>

  <insert id="insertEmployee" parameterType="Employee" useGeneratedKeys="true" keyProperty="id" keyColumn="ID">
    INSERT
    INTO `employees` (NAME, AGE, CITY, DEPT_ID, GENDER, SALARY)
    VALUES (#{name}, #{age}, #{city}, #{deptId}, #{gender},
    #{salary})
  </insert>

  <insert id="insertEmployeeMultiRow" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO `employees` (NAME, AGE, CITY, DEPT_ID, GENDER, SALARY) VALUES
    <foreach collection="list" item="item" separator=",">
      (#{item.name}, #{item.age}, #{item.city}, #{item.deptId},
      #{item.gender}, #{item.salary})
    </foreach>
  </insert>

  <delete id="deleteOne" parameterType="int">
    DELETE FROM `employees` WHERE ID = #{id}
  </delete>

  <delete id="deleteBatch" parameterType="java.util.List">
    DELETE FROM `employees` WHERE ID IN (
    <foreach collection="list" item="item" separator=",">
      #{item}
    </foreach>
    )
  </delete>

  <update id="updateEmployeeSet" parameterType="Employee">
    UPDATE `employees`
    <set>
      <if test="name != null and !&quot;&quot;.equals(name.trim())">
        NAME = #{name},
      </if>
      <if test="age != 0">
        AGE = AGE + 1
      </if>
    </set>
    WHERE ID = #{id}
  </update>

</mapper>