<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.github.accessun.entity.EmployeeMapper">

  <resultMap type="Department" id="departmentResultMap">
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="dept_name" property="deptName" jdbcType="VARCHAR" />
    <result column="location" property="location" jdbcType="VARCHAR" />
    <!-- <association property="manager" select="selectEmployeeByEmpId" column="MANAGER_ID"></association> -->
  </resultMap>

  <resultMap type="Employee" id="employeeResultMap">
    <id column="id" property="id" jdbcType="INTEGER" /> <!-- java.sql.Types -->
    <!-- property : You can map to something simple like: username, or to something more complicated like: address.street.number. -->
    <!-- jdbcType: The JDBC type is only required for nullable columns upon insert, update or delete. (java.sql.Types.*) -->
    <!-- javaType: A fully qualified Java class name, or a type alias (see the table above for the list of built-in type 
      aliases). MyBatis can usually figure out the type if you're mapping to a JavaBean. However, if you are mapping to a HashMap, 
      then you should specify the javaType explicitly to ensure the desired behavior. -->
    <result column="emp_name" property="name" jdbcType="VARCHAR" />
    <result column="gender" property="gender" jdbcType="VARCHAR" />
    <result column="age" property="age" jdbcType="INTEGER" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="salary" property="salary" jdbcType="INTEGER" />
    <result column="date_of_birth" property="dateOfBirth" jdbcType="DATE" />
    <association property="department" resultMap="departmentResultMap"></association>
  </resultMap>
  
  <!-- Demonstration of static SQL -->
  
  <select id="selectDepartmentCount" resultType="int">
    SELECT COUNT(*) FROM departments
  </select>
  
  <select id="selectDepartments" resultMap="departmentResultMap">
    SELECT * FROM departments LIMIT #{number}
  </select>

  <select id="selectEmployeeById" resultMap="employeeResultMap">
    SELECT * FROM employees WHERE ID = #{id}
  </select>
  
  <select id="selectDepartmentByDeptId" resultMap="departmentResultMap">
    SELECT * FROM departments WHERE ID = #{id}
  </select>

  <select id="selectEmployeeIntoHashMap" resultType="hashmap">
    SELECT * FROM employees WHERE ID = #{id}
  </select>
  
  <select id="selectAllEmployeeIds" resultType="integer">
    SELECT ID FROM employees
  </select>

  <delete id="deleteEmployeeById">
    DELETE FROM employees WHERE ID = #{id}
  </delete>

  <!-- The fully qualified class name or alias for the parameter that will be passed into this statement. This attribute 
    is optional because MyBatis can calculate the TypeHandler to use out of the actual parameter passed to the statement. Default 
    is unset. -->
  
  <!-- Demonstration of dynamic SQL -->

  <select id="selectEmployeesByGender" resultMap="employeeResultMap">
    SELECT * FROM employees WHERE 1 = 1
    <if test="gender != null">
      AND gender = #{gender}
    </if>
  </select>

  <select id="selectEmployeesByGenderAndName" resultMap="employeeResultMap">
    SELECT * FROM employees WHERE 1 = 1
    <choose>
      <when test="gender != null">
        AND GENDER = #{gender}
      </when>
      <when test="name != null and !&quot;&quot;.equals(name.trim())">
        AND emp_name = #{name}
      </when>
      <otherwise>
        LIMIT 10
      </otherwise>
    </choose>
  </select>

  <!-- The where element knows to only insert "WHERE" if there is any content returned -->
  <!-- by the containing tags. Furthermore, if that content begins with "AND" or "OR", -->
  <!-- it knows to strip it off. -->
  <select id="selectEmployeesByConditions" resultMap="employeeResultMap">
    SELECT * FROM employees
    <where>
      <if test="name != null">emp_name = #{name}</if>
      <if test="gender != null">AND GENDER = #{gender}</if>
      <if test="age != 0">AND AGE &lt; 30</if>
    </where>
  </select>

  <select id="selectEmployeesByIds" resultMap="employeeResultMap">
    SELECT * employees
    WHERE ID IN
    <foreach collection="list" index="index" item="item" open="(" close=")" separator=",">
      #{item}
    </foreach>
  </select>

  <insert id="insertEmployee" useGeneratedKeys="true" keyProperty="id" keyColumn="ID">
    INSERT
    INTO employees (emp_name, gender, age, email, salary, date_of_birth, dept_id)
    VALUES (#{name}, #{gender}, #{age}, #{email}, #{salary}, #{dateOfBirth}, #{deptId})
  </insert>

  <insert id="insertEmployees" useGeneratedKeys="true" keyProperty="id" keyColumn="ID">
    INSERT INTO employees (emp_name, gender, age, email, salary, date_of_birth, dept_id) VALUES
    <foreach collection="list" item="item" separator=",">
      (#{item.name}, #{item.gender}, #{item.age}, #{item.email}, #{item.salary},
      #{item.dateOfBirth}, #{item.deptId})
    </foreach>
  </insert>

  <delete id="deleteEmployeesByIds">
    DELETE FROM employees WHERE ID IN
    <foreach collection="list" item="item" open="(" close=")" separator=",">
      #{item}
    </foreach>
  </delete>

  <update id="updateEmployeeInfosById">
    UPDATE employees
    <set>
      <if test="name != null and !&quot;&quot;.equals(name.trim())">
        emp_name = #{name},
      </if>
      <if test="age != 0">
        AGE = AGE + 1
      </if>
    </set>
    WHERE ID = #{id}
  </update>

  <select id="selectEmployeeByNamePattern" resultMap="employeeResultMap">
    <bind name="pattern" value="'%' + _parameter + '%'" />
    SELECT * FROM employees WHERE emp_name LIKE #{pattern}
  </select>

</mapper>